{"version":3,"sources":["logo.svg","components/TensorflowExample.js","App.js","reportWebVitals.js","index.js"],"names":["TensorflowExample","useState","x","y","valuePairsState","setValuePairsState","model","trained","predictedValue","valueToPredict","modelState","setModelState","handleValuePairChange","e","updatedValuePairs","update","target","dataset","index","name","$set","parseInt","value","className","map","val","data-index","onChange","type","pattern","onClick","xValues","yValues","forEach","push","tf","add","dense","units","inputShape","compile","loss","optimizer","xs","length","ys","fit","epochs","then","placholder","predict","arraySync","disabled","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8389af81.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react';\n\nimport update from 'immutability-helper';\nimport * as tf from '@tensorflow/tfjs';\n\nimport './TensorflowExample.css';\n\nconst TensorflowExample = () => {\n  // Value pair state\n  const [valuePairsState, setValuePairsState] = useState([\n    { x: -1, y: -3 },\n    { x: 0, y: -1 },\n    { x: 1, y: 1 },\n    { x: 2, y: 3 },\n    { x: 3, y: 5 },\n    { x: 4, y: 7 },\n  ]);\n\n  // Define the model state\n  const [modelState, setModelState] = useState({\n    model: null,\n    trained: false,\n    predictedValue: 'Click on train!',\n    valueToPredict: 1,\n  });\n\n  // Event handlers\n  const handleValuePairChange = (e) => {\n    const updatedValuePairs = update(valuePairsState, {\n      [e.target.dataset.index]: {\n        [e.target.name]: { $set: parseInt(e.target.value) },\n      },\n    });\n\n    setValuePairsState(updatedValuePairs);\n  };\n\n  const handleAddItem = () => {\n    setValuePairsState([...valuePairsState, { x: 1, y: 1 }]);\n  };\n\n  const handleModelChange = (e) =>\n    setModelState({\n      ...modelState,\n      [e.target.name]: [parseInt(e.target.value)],\n    });\n\n  const handleTrainModel = () => {\n    let xValues = [],\n      yValues = [];\n\n    valuePairsState.forEach((val, index) => {\n      xValues.push(val.x);\n      yValues.push(val.y);\n    });\n\n    // Defeine a model for linear regression\n    const model = tf.sequential();\n    model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\n\n    // Prepare the model for training: Specify the loss and the optimizer\n    model.compile({ loss: 'meanSquaredError', optimizer: 'sgd' });\n    const xs = tf.tensor2d(xValues, [xValues.length, 1]);\n    const ys = tf.tensor2d(yValues, [yValues.length, 1]);\n\n    model.fit(xs, ys, { epochs: 250 }).then(() => {\n      setModelState({\n        ...modelState,\n        model: model,\n        trained: true,\n        predictedValue: 'Ready for making predictions',\n      });\n    });\n  };\n\n  const handlePredict = () => {\n    // Use the model to do inference on  a data point the model hasn't seen before:\n    const predictedValue = modelState.model\n      .predict(tf.tensor2d([modelState.valueToPredict], [1, 1]))\n      .arraySync()[0][0];\n\n    setModelState({\n      ...modelState,\n      predictedValue: predictedValue,\n    });\n  };\n\n  return (\n    <div className='tensorflow-example'>\n      <div className='train-controls'>\n        <h2 className='section'>Training data (x, y) pairs</h2>\n        <div className='row labels'>\n          <div className='field-label column'>X</div>\n          <div className='field-label column'>Y</div>\n        </div>\n\n        {valuePairsState.map((val, index) => {\n          return (\n            <div key={index} className='row'>\n              <input\n                className='field field-x column'\n                value={val.x}\n                name='x'\n                data-index={index}\n                onChange={handleValuePairChange}\n                type='number'\n                pattern='[0-9]*'\n              />\n              <input\n                className='field field-y column'\n                value={val.y}\n                name='y'\n                data-index={index}\n                onChange={handleValuePairChange}\n                type='number'\n              />\n            </div>\n          );\n        })}\n\n        <button\n          className='button-add-example button--green'\n          onClick={handleAddItem}\n        >\n          +\n        </button>\n\n        <button\n          className='button-train button--green'\n          onClick={handleTrainModel}\n        >\n          Train\n        </button>\n      </div>\n\n      <div className='predict-controls'>\n        <h2 className='section'>Predicting</h2>\n        <input\n          className='field element'\n          value={modelState.valueToPredict}\n          name='valueToPredict'\n          onChange={handleModelChange}\n          type='number'\n          placholder='Enter an integer number'\n        />{' '}\n        <br />\n        <div className='element'>{modelState.predictedValue}</div>\n        <button\n          className='element button--green'\n          onClick={handlePredict}\n          disabled={!modelState.trained}\n        >\n          Predict\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default TensorflowExample;\n","import logo from './logo.svg';\nimport './App.css';\n\nimport TensorflowExample from './components/TensorflowExample';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <TensorflowExample />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}